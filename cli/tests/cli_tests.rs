//! This contains all tests run on fmu's generated by the UNIFMU CLI.
//! The setup for all tests is done in rust, but for actual verification this
//! relies on two non-rust dependencies.
//! 
//! 1. FMU importing and functionality is tested in python using the fmpy
//!    library. These tests are located in the `python_tests` subdirectory.
//! 2. FMU validation is done using the vdmcheck java application. This app
//!    can be found in the `test_dependencies` directory located in the root
//!    of this repository.
//! 
//! See the `common` submodule for shared test functionality, and the
//! unifmu_macros crate for useful macros.
use unifmu_macros::for_each_fmu;

mod common;
use common::{
    distributed_fmu_python_test,
    fmu_python_test,
    vdm_check,
    BasicFmu,
    BreakableFmu
};

use serial_test::{serial, parallel};

#[for_each_fmu]
#[test]
fn test_vdm_check() {
    let fmu = WildFmu{};

    vdm_check(fmu);
}

#[for_each_fmu(include: fmi2)]
#[test]
fn test_version() {
    let fmu = WildFmu{};

    fmu_python_test(fmu, "fmi2_version");
}

#[for_each_fmu(include: fmi3)]
#[test]
fn test_version() {
    let fmu = WildFmu{};

    fmu_python_test(fmu, "fmi3_version");
}

#[for_each_fmu(include: zipped)]
#[test]
fn test_extract() {
    let fmu = WildFmu{};

    fmu_python_test(fmu, "extract_fmu");
}

#[for_each_fmu(include: fmi2, local)]
#[test]
fn test_intantiate() {
    let fmu = WildFmu{};

    fmu_python_test(fmu, "fmi2_instantiate");
}

#[for_each_fmu(include: fmi3, local)]
#[test]
fn test_intantiate() {
    let fmu = WildFmu{};

    fmu_python_test(fmu, "fmi3_instantiate");
}

#[for_each_fmu(include: fmi2, distributed, blackbox)]
#[test]
fn test_intantiate() {
    let fmu = WildFmu{};

    distributed_fmu_python_test(fmu, "fmi2_instantiate");
}

#[for_each_fmu(include: fmi3, distributed, blackbox)]
#[test]
fn test_intantiate() {
    let fmu = WildFmu{};

    distributed_fmu_python_test(fmu, "fmi3_instantiate");
}

#[for_each_fmu(include: fmi2, local)]
#[test]
fn test_instantiate_multiple() {
    let fmu = WildFmu{};

    fmu_python_test(fmu, "fmi2_instantiate_multiple");
}

#[for_each_fmu(include: fmi2, distributed, blackbox)]
#[test]
fn test_instantiate_multiple() {
    let fmu = WildFmu{};

    distributed_fmu_python_test(fmu, "fmi2_instantiate_multiple");
}

#[for_each_fmu(include: fmi2, local)]
#[test]
fn test_simulate() {
    let fmu = WildFmu{};

    fmu_python_test(fmu, "fmi2_simulate");
}

#[for_each_fmu(include: fmi3, local)]
#[test]
fn test_simulate() {
    let fmu = WildFmu{};

    fmu_python_test(fmu, "fmi3_simulate");
}

#[for_each_fmu(include: fmi2, distributed, blackbox)]
#[test]
fn test_simulate() {
    let fmu = WildFmu{};

    distributed_fmu_python_test(fmu, "fmi2_simulate");
}

#[for_each_fmu(include: fmi3, distributed, blackbox)]
#[test]
fn test_simulate() {
    let fmu = WildFmu{};

    distributed_fmu_python_test(fmu, "fmi3_simulate");
}

#[for_each_fmu(include: fmi2, local, bare_directory)]
#[test]
#[should_panic(expected = "PYTHON TEST FAILED - fmi2_instantiate - instantiation: Failed to instantiate model")]
fn test_unexpected_exit_in_handshake() {
    let fmu = WildFmu{};

    fmu.inject_fault_into_backend_model_file();

    fmu_python_test(fmu, "fmi2_instantiate");
}

#[for_each_fmu(include: fmi3, local, bare_directory)]
#[test]
#[should_panic(expected = "PYTHON TEST FAILED - fmi3_instantiate - instantiation: Failed to instantiate FMU")]
fn test_unexpected_exit_in_handshake() {
    let fmu = WildFmu{};

    fmu.inject_fault_into_backend_model_file();

    fmu_python_test(fmu, "fmi3_instantiate");
}

#[for_each_fmu(include: fmi2, local, bare_directory)]
#[test]
#[should_panic(expected = "PYTHON TEST FAILED - fmi2_simulate: fmi2DoStep failed with status 3 (error).")]
fn test_unexpected_exit_during_command() {
    let fmu = WildFmu{};

    fmu.inject_fault_into_backend_do_step_function();

    fmu_python_test(fmu, "fmi2_simulate");
}

#[for_each_fmu(include: fmi3, local, bare_directory)]
#[test]
#[should_panic(expected = "PYTHON TEST FAILED - fmi3_simulate: fmi3DoStep failed with status 3 (error).")]
fn test_unexpected_exit_during_command() {
    let fmu = WildFmu{};

    fmu.inject_fault_into_backend_do_step_function();

    fmu_python_test(fmu, "fmi3_simulate");
}

#[for_each_fmu(include: fmi2, local)]
#[test]
#[should_panic(expected = "Cannot find shared library")]
fn test_instantiate_as_fmi3() {
    let fmu = WildFmu{};

    fmu_python_test(fmu, "fmi3_instantiate");
}

#[for_each_fmu(include: fmi3, local)]
#[test]
#[should_panic(expected = "Cannot find shared library")]
fn test_instantiate_as_fmi2() {
    let fmu = WildFmu{};

    fmu_python_test(fmu, "fmi2_instantiate");
}