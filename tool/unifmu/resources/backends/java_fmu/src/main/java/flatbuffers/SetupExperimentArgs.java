// automatically generated by the FlatBuffers compiler, do not modify

package flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SetupExperimentArgs extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static SetupExperimentArgs getRootAsSetupExperimentArgs(ByteBuffer _bb) { return getRootAsSetupExperimentArgs(_bb, new SetupExperimentArgs()); }
  public static SetupExperimentArgs getRootAsSetupExperimentArgs(ByteBuffer _bb, SetupExperimentArgs obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SetupExperimentArgs __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double startTime() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double stopTime() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double tolerance() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public boolean hasStopTime() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hasTolerance() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createSetupExperimentArgs(FlatBufferBuilder builder,
      double start_time,
      double stop_time,
      double tolerance,
      boolean has_stop_time,
      boolean has_tolerance) {
    builder.startTable(5);
    SetupExperimentArgs.addTolerance(builder, tolerance);
    SetupExperimentArgs.addStopTime(builder, stop_time);
    SetupExperimentArgs.addStartTime(builder, start_time);
    SetupExperimentArgs.addHasTolerance(builder, has_tolerance);
    SetupExperimentArgs.addHasStopTime(builder, has_stop_time);
    return SetupExperimentArgs.endSetupExperimentArgs(builder);
  }

  public static void startSetupExperimentArgs(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addStartTime(FlatBufferBuilder builder, double startTime) { builder.addDouble(0, startTime, 0.0); }
  public static void addStopTime(FlatBufferBuilder builder, double stopTime) { builder.addDouble(1, stopTime, 0.0); }
  public static void addTolerance(FlatBufferBuilder builder, double tolerance) { builder.addDouble(2, tolerance, 0.0); }
  public static void addHasStopTime(FlatBufferBuilder builder, boolean hasStopTime) { builder.addBoolean(3, hasStopTime, false); }
  public static void addHasTolerance(FlatBufferBuilder builder, boolean hasTolerance) { builder.addBoolean(4, hasTolerance, false); }
  public static int endSetupExperimentArgs(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SetupExperimentArgs get(int j) { return get(new SetupExperimentArgs(), j); }
    public SetupExperimentArgs get(SetupExperimentArgs obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

