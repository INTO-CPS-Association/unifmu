namespace unifmu_flatbuffers;


// Argument types
// i.e. messages sent from wrapper to slave
table SetDebugLogging
{
  categories: [string];
  logging_on: bool; 
}

table FreeInstance {}

table EnterInitializationMode {}

table ExitInitializationMode {}

table Terminate {}

table Reset {}

table SetupExperiment
{
  start_time: double;

  // currently optional scalars are not supported by python
  // until supported we will use extra bool fields
  // stop_time: double=null;
  // tolerance: double=null;
  
  stop_time: double;
  tolerance: double;
  has_stop_time: bool;
  has_tolerance: bool;
}

table SetReal
{
  references:[int] (required);
  values: [double] (required);
}

table SetInteger
{
  references:[int] (required);
  values: [int] (required);
}

table SetBoolean
{
  references:[int] (required);
  values: [bool] (required);
}

table SetString
{
  references:[int] (required);
  values: [string] (required);
}

table GetReal
{
  references: [int] (required);
}
table GetInteger
{
  references: [int] (required);
}
table GetBoolean
{
  references: [int] (required);
}
table GetString
{
  references: [int] (required);
}

table Serialize {}

table Deserialize {
  state: [byte] (required);
}

table GetDirectionalDerivatives {}

table SetInputDerivatives {}

table GetOutputDerivitives {}

table DoStep {
  current_time : double;
  step_size : double;
  no_step_prior: bool;
}

table CancelStep {}

table GetXXXStatus {}

union Fmi2Command
{
  // common
  SetDebugLogging, 
  SetupExperiment, 
  FreeInstance,
  EnterInitializationMode,
  ExitInitializationMode,
  Terminate,
  Reset,
  SetReal,
  SetInteger,
  SetBoolean,
  SetString,
  GetReal,
  GetInteger,
  GetBoolean,
  GetString,
  Serialize,
  Deserialize,
  // cosim
  GetDirectionalDerivatives,
  SetInputDerivatives,
  GetOutputDerivitives,
  DoStep,
  CancelStep,
  GetXXXStatus,
}

// An FMI2 command is identified by its id 
table FMI2Command
{
  args : Fmi2Command;
}

// return values
// i.e. messages sent from slave to wrapper

// several FMI2 operations simply return a status
// this is used as a common return type

enum Fmi2Status : int32
{
  Ok=0,
  Warning=1,
  Discard=2,
  Error=3,
  Fatal=4,
  Pending=5,
}

struct StatusReturn
{
  status: Fmi2Status;
}

table GetRealReturn
{
  status: Fmi2Status;
  values: [double];
}

table GetIntegerReturn
{
  status: Fmi2Status;
  values: [int32];
}
table GetBooleanReturn
{
  status: Fmi2Status;
  values: [bool];
}
table GetStringReturn
{
  status: Fmi2Status;
  values: [string];
}

table SerializeReturn
{
  state : [byte];
}

// union Fmi2CommandReturnValue
// {
//   StatusReturn,
//   GetRealReturn,
//   GetIntegerReturn,
//   GetBooleanReturn,
//   GetStringReturn,
//   SerializeReturn
// }


root_type FMI2Command;