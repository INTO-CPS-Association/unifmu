/*********************************************************************************
 *
 *	Copyright (c) 2017-2024, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
functions
	override[@T]: [@T] * [@T] * [@T] +> [@T]
	override(value, typedef, neither) ==
		if value <> nil
		then value
		elseif typedef <> nil
		then typedef
		else neither;

	effectiveVariables: ModelVariables * [TypeDefinitions] +> ModelVariables
	effectiveVariables(mvs, tdefs) ==
		[ effectiveVariable(mv, tdefs) | mv in seq mvs ];

	/**
	 * Calculate the effective value of a variables fields, taking defaults from any declaredType,
	 * setting optional boolean fields to true/false, and setting any defined defaults for other
	 * fields.
	 */
	effectiveVariable: ScalarVariable * [TypeDefinitions] +> ScalarVariable
	effectiveVariable(mv, tdefs) ==
		let decltype = lookupType(mv.fmi2ScalarVariable.declaredType, tdefs),
			kind     = kindOf(mv.fmi2ScalarVariable)
		in
			if decltype = nil
			then effectivetypeVariable(mv)
			elseif kindOf(decltype.fmi2SimpleType) = kind
			then effectiveTypedVariable(mv, decltype)
			else mv;		-- Type error reported elsewhere

	effectiveTypedVariable: ScalarVariable * SimpleType +> ScalarVariable
	effectiveTypedVariable(mv, decltype) ==
		let var  = mv.fmi2ScalarVariable,
			type = decltype.fmi2SimpleType,
			kind = kindOf(var)
		in
		cases kind:
			<Real> -> 
				let mk_(kmin, kmax) = minMaxOfKind(kind) in
					mk_ScalarVariable
					(
						mv.location,
						mv.name,
						mv.valueReference,
						mv.description,
						effectiveCausality(mv.causality, kind),
						effectiveVariability(mv.variability, kind),
						effectiveInitial(mv.causality, mv.variability, mv.initial, kind),
						override[bool](mv.canHandleMultipleSetPerTimeInstant, nil, false),

						mk_Real
						(
							var.location,
							decltype.name,
							override[NormalizedString](var.quantity, type.quantity, nil),
							override[NormalizedString](var.unit, type.unit, nil),
							override[NormalizedString](var.displayUnit, type.displayUnit, nil),
							override[bool](var.relativeQuantity, type.relativeQuantity, false),
							override[real](var.min, type.min, kmin),
							override[real](var.max, type.max, kmax),
							override[real](var.nominal, type.nominal, 1),
							override[bool](var.unbounded, type.unbounded, false),
							var.start,
							var.derivative,
							default[bool](var.reinit, false)
						),

						override[VendorAnnotations](mv.vendorAnnotations, nil, nil)
					),

			<Integer> ->
				let mk_(kmin, kmax) = minMaxOfKind(kind) in
					mk_ScalarVariable
					(
						mv.location,
						mv.name,
						mv.valueReference,
						mv.description,
						effectiveCausality(mv.causality, kind),
						effectiveVariability(mv.variability, kind),
						effectiveInitial(mv.causality, mv.variability, mv.initial, kind),
						override[bool](mv.canHandleMultipleSetPerTimeInstant, mv.canHandleMultipleSetPerTimeInstant, false),

						mk_Integer
						(
							var.location,
							decltype.name,
							override[NormalizedString](var.quantity, type.quantity, nil),
							override[real](var.min, type.min, kmin),
							override[real](var.max, type.max, kmax),
							var.start
						),

						override[VendorAnnotations](mv.vendorAnnotations, nil, nil)
					),

			<Boolean> ->
					mk_ScalarVariable
					(
						mv.location,
						mv.name,
						mv.valueReference,
						mv.description,
						effectiveCausality(mv.causality, kind),
						effectiveVariability(mv.variability, kind),
						effectiveInitial(mv.causality, mv.variability, mv.initial, kind),
						override[bool](mv.canHandleMultipleSetPerTimeInstant, mv.canHandleMultipleSetPerTimeInstant, false),

						mk_Boolean
						(
								mv.location,
								decltype.name,
								var.start
						),

						override[VendorAnnotations](mv.vendorAnnotations, nil, nil)
					),

			<String> ->
					mk_ScalarVariable
					(
						mv.location,
						mv.name,
						mv.valueReference,
						mv.description,
						effectiveCausality(mv.causality, kind),
						effectiveVariability(mv.variability, kind),
						effectiveInitial(mv.causality, mv.variability, mv.initial, kind),
						override[bool](mv.canHandleMultipleSetPerTimeInstant, mv.canHandleMultipleSetPerTimeInstant, false),

						mk_String
						(
								var.location,
								decltype.name,
								var.start
						),

						override[VendorAnnotations](mv.vendorAnnotations, nil, nil)
					),

			<Enumeration> ->
				let mk_(kmin, kmax) = minMaxOfKind(kind) in
					mk_ScalarVariable
					(
						mv.location,
						mv.name,
						mv.valueReference,
						mv.description,
						effectiveCausality(mv.causality, kind),
						effectiveVariability(mv.variability, kind),
						effectiveInitial(mv.causality, mv.variability, mv.initial, kind),
						override[bool](mv.canHandleMultipleSetPerTimeInstant, mv.canHandleMultipleSetPerTimeInstant, false),

						mk_Enumeration
						(
							mv.location,
							decltype.name,
							override[NormalizedString](var.quantity, type.quantity, nil),
							override[real](var.min, nil, kmin),
							override[real](var.max, nil, kmax),
							var.start
						),

					   override[VendorAnnotations](mv.vendorAnnotations, nil, nil)
					),

			others -> undefined
		end
	pre kindOf(decltype.fmi2SimpleType) = kindOf(mv.fmi2ScalarVariable);

	effectivetypeVariable: ScalarVariable +> ScalarVariable
	effectivetypeVariable(mv) ==
		let var = mv.fmi2ScalarVariable,
			kind = kindOf(var)
		in
		cases kind:
			<Real> -> 
				let mk_(kmin, kmax) = minMaxOfKind(kind) in
					mk_ScalarVariable
					(
						mv.location,
						mv.name,
						mv.valueReference,
						mv.description,
						effectiveCausality(mv.causality, kind),
						effectiveVariability(mv.variability, kind),
						effectiveInitial(mv.causality, mv.variability, mv.initial, kind),
						override[bool](mv.canHandleMultipleSetPerTimeInstant, nil, false),

						mk_Real
						(
							var.location,
							nil,
							override[NormalizedString](var.quantity, nil, nil),
							override[NormalizedString](var.unit, nil, nil),
							override[NormalizedString](var.displayUnit, nil, nil),
							override[bool](var.relativeQuantity, nil, false),
							override[real](var.min, nil, kmin),
							override[real](var.max, nil, kmax),
							override[real](var.nominal, nil, 1),
							override[bool](var.unbounded, nil, false),
							var.start,
							var.derivative,
							default[bool](var.reinit, false)
						),

						override[VendorAnnotations](mv.vendorAnnotations, nil, nil)
					),

			<Integer> ->
				let mk_(kmin, kmax) = minMaxOfKind(kind) in
					mk_ScalarVariable
					(
						mv.location,
						mv.name,
						mv.valueReference,
						mv.description,
						effectiveCausality(mv.causality, kind),
						effectiveVariability(mv.variability, kind),
						effectiveInitial(mv.causality, mv.variability, mv.initial, kind),
						override[bool](mv.canHandleMultipleSetPerTimeInstant, mv.canHandleMultipleSetPerTimeInstant, false),

						mk_Integer
						(
							var.location,
							nil,
							override[NormalizedString](var.quantity, nil, nil),
							override[real](var.min, nil, kmin),
							override[real](var.max, nil, kmax),
							var.start
						),

						override[VendorAnnotations](mv.vendorAnnotations, nil, nil)
					),

			<Boolean> ->
					mk_ScalarVariable
					(
						mv.location,
						mv.name,
						mv.valueReference,
						mv.description,
						effectiveCausality(mv.causality, kind),
						effectiveVariability(mv.variability, kind),
						effectiveInitial(mv.causality, mv.variability, mv.initial, kind),
						override[bool](mv.canHandleMultipleSetPerTimeInstant, mv.canHandleMultipleSetPerTimeInstant, false),

						mk_Boolean
						(
								mv.location,
								nil,
								var.start
						),

						override[VendorAnnotations](mv.vendorAnnotations, nil, nil)
					),

			<String> ->
					mk_ScalarVariable
					(
						mv.location,
						mv.name,
						mv.valueReference,
						mv.description,
						effectiveCausality(mv.causality, kind),
						effectiveVariability(mv.variability, kind),
						effectiveInitial(mv.causality, mv.variability, mv.initial, kind),
						override[bool](mv.canHandleMultipleSetPerTimeInstant, mv.canHandleMultipleSetPerTimeInstant, false),

						mk_String
						(
								var.location,
								nil,
								var.start
						),

						override[VendorAnnotations](mv.vendorAnnotations, nil, nil)
					),

			<Enumeration> ->
				let mk_(kmin, kmax) = minMaxOfKind(kind) in
					mk_ScalarVariable
					(
						mv.location,
						mv.name,
						mv.valueReference,
						mv.description,
						effectiveCausality(mv.causality, kind),
						effectiveVariability(mv.variability, kind),
						effectiveInitial(mv.causality, mv.variability, mv.initial, kind),
						override[bool](mv.canHandleMultipleSetPerTimeInstant, mv.canHandleMultipleSetPerTimeInstant, false),

						mk_Enumeration
						(
							mv.location,
							"",     -- Must be defined, so error picked up elsewhere
							override[NormalizedString](var.quantity, nil, nil),
							override[real](var.min, nil, kmin),
							override[real](var.max, nil, kmax),
							var.start
						),

					   override[VendorAnnotations](mv.vendorAnnotations, nil, nil)
					),

			others -> undefined
		end;

	effectiveCausality: [Causality] * Kind +> Causality
	effectiveCausality(causality, -) ==
		if causality <> nil
		then causality
		else <local>;

	effectiveVariability: [Variability] * Kind +> Variability
	effectiveVariability(variability, -) ==
		if variability <> nil
		then variability
		else <continuous>;	-- Or discrete for IntegerKinds?

	effectiveInitial: [Causality] * [Variability] * [Initial] * Kind +> [Initial]
	effectiveInitial(causality, variability, initial, kind) ==
		if initial <> nil
		then initial
		else
			let eCausality   = effectiveCausality(causality, kind),
				eVariability = effectiveVariability(variability, kind)
			in
				-- See fmi-standard/docs/index.html#table-definition-initial
				cases eCausality:
					<parameter> ->
						cases eVariability:
							<constant>		-> nil,
							<fixed>			-> <exact>,
							<tunable>		-> <exact>,
							<discrete>		-> nil,
							<continuous>	-> nil
						end,
					<calculatedParameter> ->
						cases eVariability:
							<constant>		-> nil,
							<fixed>			-> <calculated>,
							<tunable>		-> <calculated>,
							<discrete>		-> nil,
							<continuous>	-> nil
						end,
					<input> ->
						cases eVariability:
							<constant>		-> nil,
							<fixed>			-> nil,
							<tunable>		-> nil,
							<discrete>		-> nil,		-- <exact> in FMI3
							<continuous>	-> nil		-- <exact> in FMI3
						end,
					<output> ->
						cases eVariability:
							<constant>		-> <exact>,
							<fixed>			-> nil,
							<tunable>		-> nil,
							<discrete>		-> <calculated>,
							<continuous>	-> <calculated>
						end,
					<local> ->
						cases eVariability:
							<constant>		-> <exact>,
							<fixed>			-> <calculated>,
							<tunable>		-> <calculated>,
							<discrete>		-> <calculated>,
							<continuous>	-> <calculated>
						end,
					<independent> ->
						cases eVariability:
							<constant>		-> nil,
							<fixed>			-> nil,
							<tunable>		-> nil,
							<discrete>		-> nil,
							<continuous>	-> nil
						end
				end;
