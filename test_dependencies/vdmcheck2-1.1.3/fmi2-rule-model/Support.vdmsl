/*********************************************************************************
 *
 *	Copyright (c) 2017-2024, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
types
	/**
	 * A type passed to allOf, allowing arbitrary nested lists of lists of bools.
	 */
	NestedBools = seq of (bool | NestedBools);

functions
	/**
	 * Provide a simple field default if the value is nil. Used in effective functions.
	 */
	default[@T]: [@T] * @T +> @T
	default(value, ifnil) ==
		if value = nil then ifnil else value;

	/**
	 * Apply a test function to every member of a set or sequence, and return true
	 * if all of the results are true.
	 */
	apply[@T]: (@T -> bool) * [seq of @T | set of @T] +> bool
	apply(test, data) ==
		data <> nil =>
			{true} =
				if is_(data, seq of @T)
				then { test(item) | item in seq data }
				else { test(item) | item in set data };

	/**
	 * Test whether a list of booleans contains only true. Note that nil and empty lists
	 * are considered to be true and lists can contain lists (see NestedBools type).
	 */
	allOf: [NestedBools] +> bool
	allOf(s) ==
		s <> nil and s <> [] =>
			forall e in seq s &
				if is_NestedBools(e)
				then allOf(e)
				else e
	measure is not yet specified;

	/**
	 * Turn a Location into a printable string for errors.
	 */
	loc2str: Location +> seq1 of char
	loc2str(location) ==
		location.file ^ ":" ^ nat2str(location.line);

	/**
	 * Turn a natural number into a decimal string.
	 */
	nat2str: nat +> seq of char
	nat2str(n) ==
		let d : char = "0123456789"(n rem 10 + 1) in
			if n < 10
			then [d]
			else nat2str(n div 10) ^ [d]
	measure n;
