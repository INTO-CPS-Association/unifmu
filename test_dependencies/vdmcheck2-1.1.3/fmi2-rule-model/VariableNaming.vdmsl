/*********************************************************************************
 *
 *	Copyright (c) 2017-2024, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
values
	DIGITS = "0123456789";
	NONDIGITS = "abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	QCHARS = "!#$%&()*+,-./:;<>=?@[]^{}|~ ";
	ESCAPES = "'\"\\abfnrtv?";	-- ie. you can have \', \", \\, \a etc.

functions
	validStructuredName: NormalizedString +> bool
	validStructuredName(name) ==
		let mk_(ok, tail) = structuredName(name) in
			ok and tail = [];

	/**
	 * Parser functions are passed a source string and return a tuple of a bool
	 * which indicates whether the symbol was correctly parsed, and the 
	 * remaining string after the symbol was parsed. If the parse fails, the
	 * remaining string is the same as the original input (see post exp).
	 *
	 * This follows the EBNF grammar in section 2.4.7.
	 */

	-- name = identifier | "der(" identifier ["," unsignedInteger ] ")"
	structuredName: seq of char -> bool * seq of char
	structuredName(source) ==
		if source(1, ..., 4) = "der("
		then let mk_(ok, tail) = identifier(source(5, ..., len source)) in
			if ok and tail <> [] then
				if hd tail = ','
				then let mk_(ok2, tail2) = unsigned(tl tail) in
					if ok2 and tail2 <> [] and hd tail2 = ')'
					then mk_(true, tl tail2)
					else mk_(false, source)
				else if hd tail = ')'
					then mk_(true, tl tail)
					else mk_(false, source)
			else mk_(false, source)
		else identifier(source)
	post RESULT.#1 <=> source <> RESULT.#2;

	-- identifier = B-name [ arrayIndices ] {"." B-name [ arrayIndices ] }
	identifier: seq of char -> bool * seq of char
	identifier(source) ==
		let mk_(ok, tail) = bname(source) in
			if ok
			then if tail <> [] and hd tail = '.'
				then let mk_(ok2, tail2) = identifier(tl tail) in
					if ok2
					then mk_(ok2, tail2)
					else mk_(false, source)
				else let mk_(ok2, tail2) = arrayIndices(tail) in
					if ok2
					then if tail2 <> [] and hd tail2 = '.'
						then let mk_(ok3, tail3) = identifier(tl tail2) in
							if ok3
							then mk_(ok3, tail3)
							else mk_(false, source)
						else mk_(true, tail2)
					else mk_(true, tail)
			else mk_(false, source)
	post RESULT.#1 <=> source <> RESULT.#2
	measure len source;

	-- B-name = nondigit { digit | nondigit } | Q-name
	bname: seq of char -> bool * seq of char
	bname(source) ==
		let mk_(ok, tail) = qname(source) in
			if ok
			then mk_(ok, tail)
			else alphanum(source)
	post RESULT.#1 <=> source <> RESULT.#2;

	-- nondigit { digit | nondigit }
	-- nondigit = "_" | letters "a" to "z" | letters "A" to "Z"
	alphanum: seq of char -> bool * seq of char
	alphanum(source) ==
		let acount = startsWith(source, DIGITS ^ NONDIGITS) in
			if acount > 0
				and hd source in set elems NONDIGITS
				and forall i in set {2, ..., acount} &
					source(i) in set elems (DIGITS ^ NONDIGITS)
			then mk_(true, source(acount + 1, ..., len source))
			else mk_(false, source)
	post RESULT.#1 <=> source <> RESULT.#2;

	-- Q-name = "’" ( Q-char | escape ) { Q-char | escape } "’"
	qname: seq of char -> bool * seq of char
	qname(source) ==
		if source <> [] and hd source = '\''
		then let mk_(ok, tail) = qcharsOrEscapes(tl source) in
			if ok and tail <> [] and hd tail = '\''
			then mk_(true, tl tail)
			else mk_(false, source)
		else mk_(false, source)
	post RESULT.#1 <=> source <> RESULT.#2;

	-- ( Q-char | escape ) { Q-char | escape }
	qcharsOrEscapes: seq of char -> bool * seq of char
	qcharsOrEscapes(source) ==
		let mk_(ok, tail) = qcharOrEscape(source) in
			if ok and tail <> []
			then let mk_(-, tail2) = qcharsOrEscapes(tail) in mk_(true, tail2)
			else mk_(false, source)
	post RESULT.#1 <=> source <> RESULT.#2
	measure len source;

	-- ( Q-char | escape )
	qcharOrEscape: seq of char -> bool * seq of char
	qcharOrEscape(source) ==
		let mk_(ok, tail) = qchar(source) in
			if ok
			then mk_(true, tail)
			else let mk_(ok2, tail2) = escape(source) in
				if ok2
				then mk_(true, tail2)
				else mk_(false, source)
	post RESULT.#1 <=> source <> RESULT.#2;

	-- Q-char = nondigit | digit | "!" | "#" | "$" | "%" | "&" | "(" | ")" |
	--		"*" | "+" | "," | "-" | "." | "/" | ":" |
	--		";" | "<" | ">" | "=" | "?" | "@" | "[" |
	--		"]" | "^" | "{" | "}" | "|" | "~" | " "
	qchar: seq of char -> bool * seq of char
	qchar(source) ==
		if source <> [] and hd source in set elems (QCHARS ^ DIGITS ^ NONDIGITS)
		then mk_(true, tl source)
		else mk_(false, source)
	post RESULT.#1 <=> source <> RESULT.#2;

	-- unsignedInteger = digit { digit }
	unsigned: seq of char -> bool * seq of char
	unsigned(source) ==
		let dcount = startsWith(source, DIGITS) in
			if dcount > 0
			then mk_(true, source(dcount + 1, ..., len source))
			else mk_(false, source)
	post RESULT.#1 <=> source <> RESULT.#2;

	-- escape = "\’" | "\"" | "\?" | "\\" | "\a" | "\b" |
	--		"\f" | "\n" | "\r" | "\t" | "\v"
	escape: seq of char -> bool * seq of char
	escape(source) ==
		if len source > 1 and hd source = '\\'
			and source(2) in set elems ESCAPES
		then mk_(true, source(3, ..., len source))
		else mk_(false, source)
	post RESULT.#1 <=> source <> RESULT.#2;

	-- arrayIndices = "[" unsignedInteger {"," unsignedInteger} "]"
	arrayIndices: seq of char -> bool * seq of char
	arrayIndices(source) ==
		if source <> [] and hd source = '['
		then let mk_(ok, tail) = unsignedSeq(tl source) in
			if ok and tail <> [] and hd tail = ']'
			then mk_(true, tl tail)
			else mk_(false, source)
		else mk_(false, source)
	post RESULT.#1 <=> source <> RESULT.#2;

	-- unsignedInteger {"," unsignedInteger}
	unsignedSeq: seq of char -> bool * seq of char
	unsignedSeq(source) ==
		if startsWith(source, DIGITS) > 0
		then let mk_(ok, tail) = unsigned(source) in
			if ok
			then if tail <> [] and hd tail = ','
				then let mk_(ok2, tail2) = unsignedSeq(tl tail) in
					if ok2
					then mk_(true, tail2)
					else mk_(false, source)
				else mk_(true, tail)
			else mk_(false, source)
		else mk_(false, source)
	post RESULT.#1 <=> source <> RESULT.#2
	measure len source;

	-- Return the size of the stem of source that contains chars from the matching string.
	startsWith: seq of char * seq1 of char +> nat
	startsWith(source, matching) ==
		if source = []
		then 0
		else if hd source in set elems matching
			then 1 + startsWith(tl source, matching)
			else 0
	measure len source;
