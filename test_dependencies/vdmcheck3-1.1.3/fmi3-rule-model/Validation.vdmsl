/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
functions
	/**
	 * This function is called via VDMCheck.sh and MaestroCheckFMI3, being passed a single
	 * XML type.
	 */
	isValidFMIConfiguration: FmiModelDescription | FmiBuildDescription | FmiTerminalsAndIcons +> bool
	isValidFMIConfiguration(conf) ==
		if is_(conf, FmiModelDescription)
		then inv_FmiModelDescription'(conf)

		elseif is_(conf, FmiBuildDescription)
		then inv_FmiBuildDescription'(conf)

		else if is_(conf, FmiTerminalsAndIcons)
		then inv_FmiTerminalsAndIcons'(mk_(conf, nil))

		else undefined;		-- Undefined top level type

	/**
	 * Top level function to validate the top level records. This just
	 * calls the invariant function for the corresponding "prime" checked type.
	 */
	isValidFMIConfigurations: [FmiModelDescription] * [FmiBuildDescription] * [FmiTerminalsAndIcons] +> bool
	isValidFMIConfigurations(model, build, terminals) == allOf
	([
		model <> nil => inv_FmiModelDescription'(model),
		build <> nil => inv_FmiBuildDescription'(build),
		terminals <> nil => inv_FmiTerminalsAndIcons'(mk_(terminals, model))
	]);

