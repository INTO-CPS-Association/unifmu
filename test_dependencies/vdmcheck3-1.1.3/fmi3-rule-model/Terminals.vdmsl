/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
types
	FmiTerminalsAndIcons' = FmiTerminalsAndIcons * [FmiModelDescription]
	inv mk_(fti, fmd) == allOf
	([
		inv_GraphicalRepresentation'(fti.graphicalRepresentation),
		inv_Terminals'(mk_(fti.terminals, fmd)),
		inv_Annotations'(fti.annotations)
	]);

	GraphicalRepresentation' = [GraphicalRepresentation]
	inv gr == gr <> nil => allOf
	([
    	inv_CoordinateSystem'(gr.coordinateSystem),
    	inv_Icon'(gr.icon),
    	inv_Annotations'(gr.annotations)
	]);

	CoordinateSystem' = [CoordinateSystem]
	inv cs == cs <> nil => allOf
	([
		-- Rules are defined in Terminals.adoc
		validCoordinateSystem(cs)
	]);

	Icon' = [Icon]
	inv icon == icon <> nil => allOf
	([
		validIcon(icon)
	]);

	Terminals' = [seq of Terminal] * [FmiModelDescription]
	inv mk_(ts, fmd) == ts <> nil => allOf
	([
		invs_Terminal'(ts, fmd)
	]);

	Terminal' = Terminal * [FmiModelDescription]
	inv mk_(t, fmd) == allOf
	([
		inv_Terminals'(mk_(t.terminal, fmd)),		-- RECURSIVE!!
		inv_Annotations'(t.annotations),

		-- Rules are defined in Terminals.adoc
		validTerminalMemberVariables(t, fmd),
		validTerminalGraphicalRepresentation(t),
		validTerminalStreamMemberVariables(t, fmd)
	]);

