/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
types
	UnitDefinitions' = [UnitDefinitions]
	inv units == units <> nil => allOf
	([
		invs_Unit'(units),

		-- Rules are defined in UnitDefinitions.adoc
		validUnitNames(units)
	]);

	Unit' = Unit
	inv unit == allOf
	([
		invs_DisplayUnit'(unit.displayUnit),
		inv_BaseUnit'(unit.baseUnit),
		inv_Annotations'(unit.annotations),

		-- Rules are defined in UnitDefinitions.adoc
		validDisplayUnitNames(unit)
	]);

	BaseUnit' = [BaseUnit]
	inv bunit == bunit <> nil => allOf
	(
		let - = effectiveBaseUnit(bunit) in
		[
			true	-- No rules for BaseUnit?
		]
	);

	DisplayUnit' = DisplayUnit
	inv dunit == allOf
	(
		let edu = effectiveDisplayUnit(dunit) in
		[
			inv_Annotations'(edu.annotations),

			-- Rules are defined in UnitDefinitions.adoc
			validInverseAndOffset(edu)
		]
	);

functions
	effectiveBaseUnit: BaseUnit +> BaseUnit
	effectiveBaseUnit(bunit) ==
		mk_BaseUnit
		(
			bunit.location,
			default[int](bunit.kg, 0),
			default[int](bunit.m, 0),
			default[int](bunit.s, 0),
			default[int](bunit.a, 0),
			default[int](bunit.k, 0),
			default[int](bunit.mol, 0),
			default[int](bunit.cd, 0),
			default[int](bunit.rad, 0),
			default[real](bunit.factor, 1),
			default[real](bunit.offset, 0)
		);

	effectiveDisplayUnit: DisplayUnit +> DisplayUnit
	effectiveDisplayUnit(dunit) ==
		mk_DisplayUnit
		(
			dunit.location,
			dunit.name,
			default[real](dunit.factor, 1),
			default[real](dunit.offset, 0),
			default[bool](dunit.$inverse, false),
			dunit.annotations
		);
