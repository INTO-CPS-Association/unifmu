/*********************************************************************************
 *
 *	Copyright (c) 2017-2024, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * A collection of functions to clarify the application of a type invariant to
 * a set or sequence of values. Types that want to verify a collection of types
 * call these functions, rather than calling apply directly, which isn't as
 * easy to read.
 */
functions
	invs_BuildConfiguration': [ set of BuildConfiguration | seq of BuildConfiguration ] +> bool
	invs_BuildConfiguration'(args) ==
		apply[BuildConfiguration](inv_BuildConfiguration', args);

	invs_Category': [ set of Category | seq of Category ] +> bool
	invs_Category'(args) ==
		apply[Category](inv_Category', args);

	invs_DisplayUnit': [ set of DisplayUnit | seq of DisplayUnit ] +> bool
	invs_DisplayUnit'(args) ==
		apply[DisplayUnit](inv_DisplayUnit', args);

	invs_IncludeDirectory': [ set of IncludeDirectory | seq of IncludeDirectory ] +> bool
	invs_IncludeDirectory'(args) ==
		apply[IncludeDirectory](inv_IncludeDirectory', args);

	invs_Library': [ set of Library | seq of Library ] +> bool
	invs_Library'(args) ==
		apply[Library](inv_Library', args);

	invs_PreprocessorDefinition': [ set of PreprocessorDefinition | seq of PreprocessorDefinition ] +> bool
	invs_PreprocessorDefinition'(args) ==
		apply[PreprocessorDefinition](inv_PreprocessorDefinition', args);

	invs_SourceFile': [ set of SourceFile | seq of SourceFile ] +> bool
	invs_SourceFile'(args) ==
		apply[SourceFile](inv_SourceFile', args);

	invs_SourceFileSet': [ set of SourceFileSet | seq of SourceFileSet ] +> bool
	invs_SourceFileSet'(args) ==
		apply[SourceFileSet](inv_SourceFileSet', args);

	invs_Terminal': seq of Terminal * [FmiModelDescription] +> bool
	invs_Terminal'(args, fmd) ==
		apply[Terminal * [FmiModelDescription]](inv_Terminal', [ mk_(arg, fmd) | arg in seq args ]);

	invs_Unit': [ set of Unit | seq of Unit ] +> bool
	invs_Unit'(args) ==
		apply[Unit](inv_Unit', args);

	invs_Unknowns': [ set of Unknown | seq of Unknown ] +> bool
	invs_Unknowns'(args) ==
		apply[Unknown](inv_Unknown', args);

	invs_SimpleTypes': [ set of SimpleType | seq of SimpleType ] +> bool
	invs_SimpleTypes'(args) ==
		apply[SimpleType](inv_SimpleType', args);
